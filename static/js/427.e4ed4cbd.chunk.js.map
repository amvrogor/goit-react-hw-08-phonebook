{"version":3,"file":"static/js/427.e4ed4cbd.chunk.js","mappings":"qQAGaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,gPAYJE,EAAYF,EAAAA,GAAAA,MAAH,qEAKTG,GAAeH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,2DAKZK,EAAeL,EAAAA,GAAAA,OAAH,soB,UCbnBM,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KACHE,QACC,yHACA,0IAEDC,SAAS,oBACZC,MAAOJ,EAAAA,GAAW,oBACfI,MAAM,uBACND,SAAS,qBACZE,SAAUL,EAAAA,GAAW,uBAClBM,IAAI,EAAG,qDACPH,SAAS,0BAGDI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,CACEC,cAAe,CACbT,KAAM,GACNG,MAAO,GACPC,SAAU,IAEZN,iBAAkBA,EAClBY,SAAU,SAACC,EAAQC,GACjBC,QAAQC,IAAIH,GACZJ,GACEQ,EAAAA,EAAAA,IAAS,CACPf,KAAMW,EAAOX,KACbG,MAAOQ,EAAOR,MACdC,SAAUO,EAAOP,YAIrBQ,EAAQI,WACT,EAlBH,UAoBE,UAACzB,EAAD,YACE,UAACG,EAAD,uBAEE,SAAC,KAAD,CAAOuB,KAAK,OAAOjB,KAAK,UACxB,SAACL,EAAD,CAAcK,KAAK,OAAOkB,UAAU,aAEtC,UAACxB,EAAD,oBAEE,SAAC,KAAD,CAAOuB,KAAK,QAAQjB,KAAK,WACzB,SAACL,EAAD,CAAcK,KAAK,QAAQkB,UAAU,aAEvC,UAACxB,EAAD,uBAEE,SAAC,KAAD,CAAOuB,KAAK,WAAWjB,KAAK,cAC5B,SAACL,EAAD,CAAcK,KAAK,WAAWkB,UAAU,aAE1C,SAACrB,EAAD,CAAcoB,KAAK,SAAnB,0BAIP,ECpEc,SAASE,IACtB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,+CAEF,SAACb,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  width: 50%;\n  margin-bottom: 10px;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  border-radius: 5px;\n  background-color: #f3f3f3;\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.12);\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 14px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  /* width: 100%; */\n  margin: 0 auto;\n  padding: 4px 16px;\n  border-radius: 2px;\n  background-color: #ee8905;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: inline-block;\n  color: #ffffff;\n  border: 0;\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  min-width: 130px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  :hover,\n  :focus {\n    background-color: #ff9100;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { register } from 'redux/operations';\n\nimport {\n  Form,\n  FormField,\n  ErrorMessage,\n  SubmitButton,\n} from './RegisterForm.styled';\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  email: Yup.string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: Yup.string('Enter your password')\n    .min(7, 'Password should be of minimum 7 characters length')\n    .required('Password is required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values, actions) => {\n        console.log(values);\n        dispatch(\n          register({\n            name: values.name,\n            email: values.email,\n            password: values.password,\n          })\n        );\n\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormField>\n          Username\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormField>\n        <FormField>\n          Email\n          <Field type=\"email\" name=\"email\" />\n          <ErrorMessage name=\"email\" component=\"span\" />\n        </FormField>\n        <FormField>\n          Password\n          <Field type=\"password\" name=\"password\" />\n          <ErrorMessage name=\"password\" component=\"span\" />\n        </FormField>\n        <SubmitButton type=\"submit\">Register</SubmitButton>\n      </Form>\n    </Formik>\n  );\n};\n\n// export const RegisterForm = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     dispatch(\n//       register({\n//         name: form.elements.name.value,\n//         email: form.elements.email.value,\n//         password: form.elements.password.value,\n//       })\n//     );\n//     form.reset();\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit} autoComplete=\"off\">\n//       <label>\n//         Username\n//         <input type=\"text\" name=\"name\" />\n//       </label>\n//       <label>\n//         Email\n//         <input type=\"email\" name=\"email\" />\n//       </label>\n//       <label>\n//         Password\n//         <input type=\"password\" name=\"password\" />\n//       </label>\n//       <button type=\"submit\">Register</button>\n//     </form>\n//   );\n// };\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </HelmetProvider>\n  );\n}\n"],"names":["Form","styled","FormikForm","FormField","ErrorMessage","FormikError","SubmitButton","validationSchema","Yup","name","matches","required","email","password","min","RegisterForm","dispatch","useDispatch","initialValues","onSubmit","values","actions","console","log","register","resetForm","type","component","Register"],"sourceRoot":""}